FROM node:20.15 AS builder

# Build the application from source
WORKDIR /src
COPY . /src
RUN corepack enable && corepack prepare pnpm@10.2.1 --activate
RUN --mount=type=cache,id=pnpm-store,target=/root/.local/share/pnpm/store --mount=type=cache,id=pnpm-metadata,target=/root/.cache/pnpm/metadata DOCKER_BUILD=true pnpm install --frozen-lockfile
RUN pnpm build

# Delete all dev dependencies
RUN npx jq 'del(.pnpm.patchedDependencies)' package.json > package.json.tmp; mv package.json.tmp package.json
RUN node .github/scripts/trim-fe-packageJson.js

# Delete any source code or typings
RUN find . -type f -name "*.ts" -o -name "*.vue" -o -name "tsconfig.json" -o -name "*.tsbuildinfo" | xargs rm -rf

# Deploy the `n8n` package into /compiled
RUN mkdir /compiled
RUN NODE_ENV=production DOCKER_BUILD=true pnpm --filter=n8n --prod --no-optional --legacy deploy /compiled

# 2. Start with a new clean image with just the code that is needed to run n8n
FROM node:20.15
ENV NODE_ENV=production
ENV N8N_RELEASE_TYPE=dev

LABEL org.opencontainers.image.title="n8n"
LABEL org.opencontainers.image.description="Workflow Automation Tool"
LABEL org.opencontainers.image.source="https://github.com/n8n-io/n8n"
LABEL org.opencontainers.image.url="https://n8n.io"
LABEL org.opencontainers.image.version=1.93.0

WORKDIR /home/node

# Install tini and other dependencies
RUN apt-get update && apt-get install -y tini wget && apt-get clean

COPY --from=builder /compiled /usr/local/lib/node_modules/n8n
COPY docker/images/n8n/render-entrypoint.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Setup the Task Runner Launcher (シンプル化)
ARG LAUNCHER_VERSION=1.1.2
COPY docker/images/n8n/n8n-task-runners.json /etc/n8n-task-runners.json
RUN mkdir /launcher-temp && \
    cd /launcher-temp && \
    wget https://github.com/n8n-io/task-runner-launcher/releases/download/${LAUNCHER_VERSION}/task-runner-launcher-${LAUNCHER_VERSION}-linux-amd64.tar.gz && \
    tar xvf task-runner-launcher-${LAUNCHER_VERSION}-linux-amd64.tar.gz --directory=/usr/local/bin && \
    cd - && \
    rm -r /launcher-temp

RUN cd /usr/local/lib/node_modules/n8n && \
    npm rebuild sqlite3 && \
    cd - && \
    ln -s /usr/local/lib/node_modules/n8n/bin/n8n /usr/local/bin/n8n

# データディレクトリの設定
RUN mkdir -p /data/.n8n && \
    chown -R node:node /data

# 環境変数設定
ENV NODE_OPTIONS="--max-old-space-size=512" \
    N8N_PORT=5678 \
    N8N_PATH=/ \
    N8N_USER_FOLDER=/data/.n8n \
    DB_SQLITE_PATH=/data/database.sqlite \
    TZ=Asia/Tokyo \
    N8N_DIAGNOSTICS_ENABLED=false \
    N8N_HIRING_BANNER_ENABLED=false \
    EXECUTIONS_PROCESS=main \
    EXECUTIONS_MODE=regular \
    N8N_DISABLE_PRODUCTION_MAIN_PROCESS=false

# ヘルスチェックエンドポイントを提供するための設定
RUN echo '{"path": "/healthz", "response": {"status": 200, "body": "OK"}}' > /home/node/health-check.json
ENV N8N_HEALTH_CHECK_CONFIG=/home/node/health-check.json

USER node
EXPOSE 5678

ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
CMD ["n8n", "start"] 